package com.netframe.db;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "DOWN_LOAD_ENTITY".
*/
public class DownLoadEntityDao extends AbstractDao<DownLoadEntity, Long> {

    public static final String TABLENAME = "DOWN_LOAD_ENTITY";

    /**
     * Properties of entity DownLoadEntity.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Start_pos = new Property(0, Long.class, "start_pos", false, "START_POS");
        public final static Property End_pos = new Property(1, Long.class, "end_pos", false, "END_POS");
        public final static Property Progress_pos = new Property(2, Long.class, "progress_pos", false, "PROGRESS_POS");
        public final static Property Download_url = new Property(3, String.class, "download_url", false, "DOWNLOAD_URL");
        public final static Property Thread_id = new Property(4, Integer.class, "thread_id", false, "THREAD_ID");
        public final static Property Id = new Property(5, Long.class, "id", true, "_id");
    }


    public DownLoadEntityDao(DaoConfig config) {
        super(config);
    }
    
    public DownLoadEntityDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"DOWN_LOAD_ENTITY\" (" + //
                "\"START_POS\" INTEGER," + // 0: start_pos
                "\"END_POS\" INTEGER," + // 1: end_pos
                "\"PROGRESS_POS\" INTEGER," + // 2: progress_pos
                "\"DOWNLOAD_URL\" TEXT," + // 3: download_url
                "\"THREAD_ID\" INTEGER," + // 4: thread_id
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT );"); // 5: id
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"DOWN_LOAD_ENTITY\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, DownLoadEntity entity) {
        stmt.clearBindings();
 
        Long start_pos = entity.getStart_pos();
        if (start_pos != null) {
            stmt.bindLong(1, start_pos);
        }
 
        Long end_pos = entity.getEnd_pos();
        if (end_pos != null) {
            stmt.bindLong(2, end_pos);
        }
 
        Long progress_pos = entity.getProgress_pos();
        if (progress_pos != null) {
            stmt.bindLong(3, progress_pos);
        }
 
        String download_url = entity.getDownload_url();
        if (download_url != null) {
            stmt.bindString(4, download_url);
        }
 
        Integer thread_id = entity.getThread_id();
        if (thread_id != null) {
            stmt.bindLong(5, thread_id);
        }
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(6, id);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, DownLoadEntity entity) {
        stmt.clearBindings();
 
        Long start_pos = entity.getStart_pos();
        if (start_pos != null) {
            stmt.bindLong(1, start_pos);
        }
 
        Long end_pos = entity.getEnd_pos();
        if (end_pos != null) {
            stmt.bindLong(2, end_pos);
        }
 
        Long progress_pos = entity.getProgress_pos();
        if (progress_pos != null) {
            stmt.bindLong(3, progress_pos);
        }
 
        String download_url = entity.getDownload_url();
        if (download_url != null) {
            stmt.bindString(4, download_url);
        }
 
        Integer thread_id = entity.getThread_id();
        if (thread_id != null) {
            stmt.bindLong(5, thread_id);
        }
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(6, id);
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 5) ? null : cursor.getLong(offset + 5);
    }    

    @Override
    public DownLoadEntity readEntity(Cursor cursor, int offset) {
        DownLoadEntity entity = new DownLoadEntity( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // start_pos
            cursor.isNull(offset + 1) ? null : cursor.getLong(offset + 1), // end_pos
            cursor.isNull(offset + 2) ? null : cursor.getLong(offset + 2), // progress_pos
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // download_url
            cursor.isNull(offset + 4) ? null : cursor.getInt(offset + 4), // thread_id
            cursor.isNull(offset + 5) ? null : cursor.getLong(offset + 5) // id
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, DownLoadEntity entity, int offset) {
        entity.setStart_pos(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setEnd_pos(cursor.isNull(offset + 1) ? null : cursor.getLong(offset + 1));
        entity.setProgress_pos(cursor.isNull(offset + 2) ? null : cursor.getLong(offset + 2));
        entity.setDownload_url(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setThread_id(cursor.isNull(offset + 4) ? null : cursor.getInt(offset + 4));
        entity.setId(cursor.isNull(offset + 5) ? null : cursor.getLong(offset + 5));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(DownLoadEntity entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(DownLoadEntity entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(DownLoadEntity entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
